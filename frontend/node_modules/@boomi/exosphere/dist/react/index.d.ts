declare module '@boomi/exosphere/components/button/button' {
  import { LitElement } from "lit";
  export const enum ButtonType {
      PRIMARY = "primary",
      SECONDARY = "secondary",
      TERTIARY = "tertiary"
  }
  export const enum ButtonFlavor {
      BASE = "base",
      BRANDED = "branded",
      RISKY = "risky"
  }
  export const enum ButtonSize {
      DEFAULT = "default",
      LARGE = "large"
  }
  class Button extends LitElement {
      static styles: import("lit").CSSResult;
      button: HTMLButtonElement;
      /**
       * flavor of selected button
       */
      flavor: ButtonFlavor;
      /**
       * Variants of buttons
       */
      type: ButtonType;
      /**
       * Size of the button
       */
      size: ButtonSize;
      /**
       * disable the button
       */
      disabled: boolean;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Button;
  global {
      interface HTMLElementTagNameMap {
          "ex-button": Button;
      }
  }

}
declare module '@boomi/exosphere/components/button/button.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/card/card' {
  import { LitElement } from "lit";
  class Card extends LitElement {
      static styles: import("lit").CSSResult;
      private readonly slotController;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Card;
  global {
      interface HTMLElementTagNameMap {
          "ex-card": Card;
      }
  }

}
declare module '@boomi/exosphere/components/card/card.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/checkbox/checkbox' {
  import { LitElement } from "lit";
  class Checkbox extends LitElement {
      static styles: import("lit").CSSResult;
      name: string;
      value: string;
      checked: boolean;
      private handleClick;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Checkbox;
  global {
      interface HTMLElementTagNameMap {
          "ex-checkbox": Checkbox;
      }
  }

}
declare module '@boomi/exosphere/components/checkbox/checkbox.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/constants' {
  enum zIndex {
      "dropdown" = 1010
  }
  export default zIndex;

}
declare module '@boomi/exosphere/components/dialog/dialog' {
  import { LitElement } from "lit";
  class Dialog extends LitElement {
      static styles: import("lit").CSSResult;
      title: string;
      open: boolean;
      icon: string;
      constructor();
      attributeChangedCallback(name: any, oldval: any, newval: any): void;
      /**
       * close the modal
       */
      close(): void;
      private keydownHandler;
      updated(): void;
      getDialogIcon(): "" | import("lit-html").TemplateResult<1>;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Dialog;
  global {
      interface HTMLElementTagNameMap {
          "ex-dialog": Dialog;
      }
  }

}
declare module '@boomi/exosphere/components/dialog/dialog.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/dropdown/dropdown.constants' {
  enum dropdownClassNames {
      container = "dropdown--container",
      trigger = "dropdown--trigger",
      popover = "dropdown--popover"
  }
  export default dropdownClassNames;

}
declare module '@boomi/exosphere/components/dropdown/dropdown' {
  import { LitElement } from "lit";
  import { ButtonFlavor, ButtonSize, ButtonType } from "@boomi/exosphere/components/button/button";
  class Dropdown extends LitElement {
      static styles: import("lit").CSSResult;
      isOpen: boolean;
      icon: string;
      text: string;
      flavor: ButtonFlavor;
      type: ButtonType;
      disabled: boolean;
      align: "left" | "right";
      gap: number;
      size: ButtonSize;
      label: string;
      onToggle(): void;
      hide: () => void;
      hideOnWindowClick: (event: MouseEvent) => void;
      hideOnEscape: (event: KeyboardEvent) => void;
      connectedCallback(): void;
      disconnectedCallback(): void;
      adjustPosition: () => void;
      updated(): void;
      getTrigger(): import("lit-html").TemplateResult<1>;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Dropdown;
  global {
      interface HTMLElementTagNameMap {
          "ex-dropdown": Dropdown;
      }
  }

}
declare module '@boomi/exosphere/components/dropdown/dropdown.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/helpers' {
  const _default: {
      boolean: (value: unknown) => boolean;
  };
  export default _default;

}
declare module '@boomi/exosphere/components/icon/icon' {
  import { LitElement } from "lit";
  export const enum IconVariant {
      ICON = "icon",
      SECONDARY = "secondary",
      TERTIARY = "tertiary",
      INVERSE = "inverse",
      DISABLED = "disabled",
      DANGER = "danger",
      DEFAULT = "default"
  }
  export class Icon extends LitElement {
      static styles: import("lit").CSSResult;
      icon: string;
      label: string;
      variant: IconVariant;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Icon;
  global {
      interface HTMLElementTagNameMap {
          "ex-icon": Icon;
      }
  }

}
declare module '@boomi/exosphere/components/icon/icon.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/icon/icons/index' {
  const Icons: Record<string, string>;
  export const IconOptions: string[];
  export default Icons;

}
declare module '@boomi/exosphere/components/icon-button/icon-button' {
  import { LitElement } from "lit";
  import { IconVariant } from "@boomi/exosphere/components/icon/icon";
  export const enum IconButtonType {
      PRIMARY = "primary",
      SECONDARY = "secondary",
      TERTIARY = "tertiary"
  }
  class IconButton extends LitElement {
      static styles: import("lit").CSSResult;
      /**
       * Variant or type of the button
       */
      type: IconButtonType;
      /**
       * Icon associated with the button
       */
      icon: string;
      /**
       * disable the button
       */
      disabled: boolean;
      /**
       * Circular button
       */
      circular: boolean;
      /**
       * Icon variants
       */
      variant: IconVariant;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default IconButton;
  global {
      interface HTMLElementTagNameMap {
          "ex-button-icon": IconButton;
      }
  }

}
declare module '@boomi/exosphere/components/icon-button/icon-button.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/index' {
  import Button from "@boomi/exosphere/components/button/button";
  import Icon from "@boomi/exosphere/components/icon/icon";
  import IconButton from "@boomi/exosphere/components/icon-button/icon-button";
  import Dialog from "@boomi/exosphere/components/dialog/dialog";
  import Card from "@boomi/exosphere/components/card/card";
  import Tile from "@boomi/exosphere/components/tile/tile";
  import Dropdown from "@boomi/exosphere/components/dropdown/dropdown";
  import Toggle from "@boomi/exosphere/components/toggle/toggle";
  import Radio from "@boomi/exosphere/components/radio/radio";
  import RadioGroup from "@boomi/exosphere/components/radio-group/radio-group";
  import Checkbox from "@boomi/exosphere/components/checkbox/checkbox";
  import Loader from "@boomi/exosphere/components/loader/loader";
  import Menu from "@boomi/exosphere/components/menu/menu";
  import MenuItem from "@boomi/exosphere/components/menu-item/menu-item";
  import { Table, THead, TBody, Tr, Td, Th, TdGroup, TSubheader } from "@boomi/exosphere/components/table/table";
  export { Button, Icon, IconButton, Dialog, Card, Tile, Dropdown, Toggle, Radio, RadioGroup, Checkbox, Loader, Menu, MenuItem, Table, THead, TBody, Tr, Td, Th, TdGroup, TSubheader, };

}
declare module '@boomi/exosphere/components/loader/loader' {
  import { LitElement } from "lit";
  export const enum LoaderSize {
      DEFAULT = "default",
      MEDIUM = "medium",
      LARGE = "large"
  }
  class Loader extends LitElement {
      static styles: import("lit").CSSResult;
      /**
       * Size of the button
       */
      size: LoaderSize;
      /**
       * loader with backdrop
       */
      backdrop: boolean;
      /**
       * loader as inline
       */
      inline: boolean;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Loader;
  global {
      interface HTMLElementTagNameMap {
          "ex-loader": Loader;
      }
  }

}
declare module '@boomi/exosphere/components/loader/loader.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/menu/menu' {
  import { LitElement } from "lit";
  export const enum MenuWidth {
      DEFAULT = "default",
      MEDIUM = "medium",
      LARGE = "large",
      XLARGE = "x-large",
      XXLARGE = "xx-large"
  }
  class Menu extends LitElement {
      static styles: import("lit").CSSResult;
      /**
       * Width of the menu
       */
      width: MenuWidth;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Menu;
  global {
      interface HTMLElementTagNameMap {
          "ex-menu": Menu;
      }
  }

}
declare module '@boomi/exosphere/components/menu/menu.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/menu-item/menu-item' {
  import { LitElement } from "lit";
  class MenuItem extends LitElement {
      static styles: import("lit").CSSResult;
      button: HTMLButtonElement;
      private readonly slotController;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default MenuItem;
  global {
      interface HTMLElementTagNameMap {
          "ex-menu-item": MenuItem;
      }
  }

}
declare module '@boomi/exosphere/components/menu-item/menu-item.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/radio/radio' {
  import { LitElement } from "lit";
  class Radio extends LitElement {
      static styles: import("lit").CSSResult;
      checked: boolean;
      hasFocus: boolean;
      /**
       * Value of the Radio
       */
      value: string;
      connectedCallback(): void;
      private handleBlur;
      private handleClick;
      private handleFocus;
      private handleKeyup;
      private setInitialAttributes;
      private addEventListeners;
      updated(changes: any): void;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Radio;
  global {
      interface HTMLElementTagNameMap {
          "ex-radio": Radio;
      }
  }

}
declare module '@boomi/exosphere/components/radio/radio.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/radio-group/radio-group' {
  import { LitElement, PropertyValues } from "lit";
  class RadioGroup extends LitElement {
      static styles: import("lit").CSSResult;
      /**
       * Label for the Radio Group
       */
      label: string;
      /**
       * Selected value of the Radio Group
       */
      value: string;
      /**
       * Name assigned to the Radio
       */
      name: string;
      /**
       * Shows the fieldset and legend of the Radio Group
       */
      fieldset: boolean;
      private getAllRadios;
      connectedCallback(): void;
      private updateCheckedRadio;
      private handleRadioClick;
      static findIncrement(event: KeyboardEvent): 1 | -1 | 0;
      private handleKeyDown;
      private handleSlotChange;
      update(changedProps: PropertyValues<this>): void;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default RadioGroup;
  global {
      interface HTMLElementTagNameMap {
          "ex-radio-group": RadioGroup;
      }
  }

}
declare module '@boomi/exosphere/components/radio-group/radio-group.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/table/table' {
  import { LitElement } from "lit";
  class Table extends LitElement {
      static styles: import("lit").CSSResult;
      render(): import("lit-html").TemplateResult<1>;
  }
  class THead extends LitElement {
      static styles: import("lit").CSSResult;
      render(): import("lit-html").TemplateResult<1>;
  }
  class TBody extends LitElement {
      static styles: import("lit").CSSResult;
      height: string;
      render(): import("lit-html").TemplateResult<1>;
  }
  class Tr extends LitElement {
      static styles: import("lit").CSSResult;
      clickable: boolean;
      render(): import("lit-html").TemplateResult<1>;
  }
  class Td extends LitElement {
      static styles: import("lit").CSSResult;
      render(): import("lit-html").TemplateResult<1>;
  }
  class Th extends LitElement {
      static styles: import("lit").CSSResult;
      render(): import("lit-html").TemplateResult<1>;
  }
  class TdGroup extends LitElement {
      static styles: import("lit").CSSResult;
      render(): import("lit-html").TemplateResult<1>;
  }
  class TSubheader extends LitElement {
      static styles: import("lit").CSSResult;
      render(): import("lit-html").TemplateResult<1>;
  }
  global {
      interface HTMLElementTagNameMap {
          "ex-table": Table;
          "ex-table-head": THead;
          "ex-table-body": TBody;
          "ex-table-tr": Tr;
          "ex-table-td": Td;
          "ex-table-th": Th;
          "ex-table-td-group": TdGroup;
          "ex-table-subheader": TSubheader;
      }
  }
  export { Table, THead, TBody, Tr, Td, Th, TdGroup, TSubheader };

}
declare module '@boomi/exosphere/components/table/table.styles' {
  const tableCss: import("lit").CSSResult;
  const headCss: import("lit").CSSResult;
  const bodyCss: import("lit").CSSResult;
  const trCss: import("lit").CSSResult;
  const tdCss: import("lit").CSSResult;
  const thCss: import("lit").CSSResult;
  const tdGroupCss: import("lit").CSSResult;
  const subheaderCss: import("lit").CSSResult;
  export { tableCss, headCss, bodyCss, trCss, tdCss, subheaderCss, tdGroupCss, thCss, };

}
declare module '@boomi/exosphere/components/tile/tile' {
  import { LitElement } from "lit";
  class Tile extends LitElement {
      static styles: import("lit").CSSResult;
      /**
       * Hyperlink of the tile
       */
      href: string;
      /**
       * Target of the tile
       */
      target: "_blank" | "_new" | "_parent" | "_self" | "_top";
      /**
       * Title of the tile
       */
      title: string;
      /**
       * aria-label of the tile
       */
      label: string;
      /**
       * aria-describedby of the tile
       */
      describedby: string;
      /**
       * border of the tile
       */
      borderless: boolean;
      private readonly slotController;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Tile;
  global {
      interface HTMLElementTagNameMap {
          "ex-tile": Tile;
      }
  }

}
declare module '@boomi/exosphere/components/tile/tile.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/components/toggle/toggle' {
  import { LitElement } from "lit";
  class Toggle extends LitElement {
      static styles: import("lit").CSSResult;
      on: boolean;
      disabled: boolean;
      size: string;
      leftIcon: string;
      rightIcon: string;
      label: string;
      tabndex: number;
      constructor();
      onClick(): void;
      onKeyUp(e: KeyboardEvent): void;
      render(): import("lit-html").TemplateResult<1>;
  }
  export default Toggle;
  global {
      interface HTMLElementTagNameMap {
          "ex-toggle": Toggle;
      }
  }

}
declare module '@boomi/exosphere/components/toggle/toggle.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/internal/slot' {
  import type { ReactiveController, ReactiveControllerHost } from "lit";
  export default class SlotController implements ReactiveController {
      host: ReactiveControllerHost & Element;
      slotNames: string[];
      constructor(host: ReactiveControllerHost & Element, ...slotNames: string[]);
      private hasNamedSlot;
      test(slotName: string): boolean;
  }

}
declare module '@boomi/exosphere/internal/styles/common.styles' {
  const _default: import("lit").CSSResult;
  export default _default;

}
declare module '@boomi/exosphere/react/button/index' {
  import * as React from 'react';
  import { Button } from '@boomi/exosphere/components/index';
  export * from '@boomi/exosphere/components/button/button';
  export const ExButton: React.ForwardRefExoticComponent<Partial<Omit<Button, "children">> & Partial<{
      onClick: (e: PointerEvent) => void;
  }> & Omit<React.HTMLAttributes<HTMLElement>, "onClick"> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/card/index' {
  import * as React from 'react';
  import { Card } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/card/card";
  export const ExCard: React.ForwardRefExoticComponent<Partial<Omit<Card, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/checkbox/index' {
  import * as React from "react";
  import { Checkbox } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/checkbox/checkbox";
  export const ExCheckbox: React.ForwardRefExoticComponent<Partial<Omit<Checkbox, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/dialog/index' {
  import * as React from 'react';
  import { Dialog } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/dialog/dialog";
  export const ExDialog: React.ForwardRefExoticComponent<Partial<Omit<Dialog, "children">> & Partial<{
      onCancel: (e: Event) => void;
  }> & Omit<React.HTMLAttributes<HTMLElement>, "onCancel"> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/dropdown/index' {
  import * as React from "react";
  import { Dropdown } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/dropdown/dropdown";
  export const ExDropdown: React.ForwardRefExoticComponent<Partial<Omit<Dropdown, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/icon/index' {
  import * as React from 'react';
  import { Icon } from "@boomi/exosphere/components/index";
  export * from '@boomi/exosphere/components/icon/icon';
  export const ExIcon: React.ForwardRefExoticComponent<Partial<Omit<Icon, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/icon-button/index' {
  import * as React from 'react';
  import { IconButton } from "@boomi/exosphere/components/index";
  export * from '@boomi/exosphere/components/icon-button/icon-button';
  export const ExIconButton: React.ForwardRefExoticComponent<Partial<Omit<IconButton, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/index' {
  export { ExButton, ButtonType, ButtonSize, ButtonFlavor } from "@boomi/exosphere/react/button/index";
  export { ExIcon, IconVariant } from "@boomi/exosphere/react/icon/index";
  export { ExIconButton, IconButtonType } from "@boomi/exosphere/react/icon-button/index";
  export { ExDialog } from "@boomi/exosphere/react/dialog/index";
  export { ExCard } from "@boomi/exosphere/react/card/index";
  export { ExTile } from "@boomi/exosphere/react/tile/index";
  export { ExDropdown } from '@boomi/exosphere/react/dropdown/index';
  export { ExToggle } from "@boomi/exosphere/react/toggle/index";
  export { ExRadio } from "@boomi/exosphere/react/radio/index";
  export { ExRadioGroup } from "@boomi/exosphere/react/radio-group/index";
  export { ExCheckbox } from "@boomi/exosphere/react/checkbox/index";
  export { ExLoader, LoaderSize } from "@boomi/exosphere/react/loader/index";
  export { ExMenu, MenuWidth } from "@boomi/exosphere/react/menu/index";
  export { ExMenuItem } from "@boomi/exosphere/react/menu-item/index";
  export { ExTable, ExTHead, ExTBody, ExTr, ExTd, ExTh, ExTdGroup, ExTSubheader, } from "@boomi/exosphere/react/table/index";

}
declare module '@boomi/exosphere/react/loader/index' {
  import * as React from 'react';
  import { Loader } from "@boomi/exosphere/components/index";
  export * from '@boomi/exosphere/components/loader/loader';
  export const ExLoader: React.ForwardRefExoticComponent<Partial<Omit<Loader, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/menu/index' {
  import * as React from 'react';
  import { Menu } from "@boomi/exosphere/components/index";
  export * from '@boomi/exosphere/components/menu/menu';
  export const ExMenu: React.ForwardRefExoticComponent<Partial<Omit<Menu, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/menu-item/index' {
  import * as React from 'react';
  import { MenuItem } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/menu-item/menu-item";
  export const ExMenuItem: React.ForwardRefExoticComponent<Partial<Omit<MenuItem, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/radio/index' {
  import * as React from "react";
  import { Radio } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/radio/radio";
  export const ExRadio: React.ForwardRefExoticComponent<Partial<Omit<Radio, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/radio-group/index' {
  import * as React from "react";
  import { RadioGroup } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/radio-group/radio-group";
  export const ExRadioGroup: React.ForwardRefExoticComponent<Partial<Omit<RadioGroup, "children">> & Partial<{
      onChange: (e: CustomEvent<any>) => void;
  }> & Omit<React.HTMLAttributes<HTMLElement>, "onChange"> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/table/index' {
  import * as React from "react";
  import { Table, THead, TBody, Tr, Td, TSubheader, Th, TdGroup } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/table/table";
  export const ExTable: React.ForwardRefExoticComponent<Partial<Omit<Table, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTHead: React.ForwardRefExoticComponent<Partial<Omit<THead, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTBody: React.ForwardRefExoticComponent<Partial<Omit<TBody, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTr: React.ForwardRefExoticComponent<Partial<Omit<Tr, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTd: React.ForwardRefExoticComponent<Partial<Omit<Td, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTh: React.ForwardRefExoticComponent<Partial<Omit<Th, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTdGroup: React.ForwardRefExoticComponent<Partial<Omit<TdGroup, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;
  export const ExTSubheader: React.ForwardRefExoticComponent<Partial<Omit<TSubheader, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/tile/index' {
  import * as React from 'react';
  import { Tile } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/tile/tile";
  export const ExTile: React.ForwardRefExoticComponent<Partial<Omit<Tile, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere/react/toggle/index' {
  import * as React from "react";
  import { Toggle } from "@boomi/exosphere/components/index";
  export * from "@boomi/exosphere/components/toggle/toggle";
  export const ExToggle: React.ForwardRefExoticComponent<Partial<Omit<Toggle, "children">> & Partial<{}> & Omit<React.HTMLAttributes<HTMLElement>, never> & {
      children?: React.ReactNode;
  } & React.RefAttributes<unknown>>;

}
declare module '@boomi/exosphere' {
  import main = require('@boomi/exosphere/src/react/index');
  export = main;
}